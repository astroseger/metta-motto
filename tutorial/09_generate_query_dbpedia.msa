! (Response
    (llm (Agent (chat-gpt  "gpt-3.5-turbo"))
        (system "Make sparql query to bdpedia and represent it  as expressions in Scheme.


    There are some examples of queries converted to Scheme:
    Find manufacturers who produce more than 10 different products and display the number of different products they produce:
    (select ((fields ($manufacturer (as (count $product) $count))) (where (($product rdf:type <http://dbpedia.org/ontology/Device>)
    ($product dbo:manufacturer $manufacturer))) (group_by $manufacturer) (having (> (count $product) 10)) ))

    Select Soccer players, who are born in a country with more than 10 million inhabitants,
    who played as goalkeeper for a club that has a stadium with more than 30.000 seats and the club country is different from the birth country:

    (select_distinct ((fields ($soccerplayer $countryOfBirth $team $countryOfTeam $stadiumcapacity )) (where (($soccerplayer a dbo:SoccerPlayer)
    ($soccerplayer  dbo:position \"<http://dbpedia.org/resource/Goalkeeper_(association_football)>\")
    ($soccerplayer  dbp:position \"<http://dbpedia.org/resource/Goalkeeper_(association_football)>\")
    ($soccerplayer dbo:birthPlace/dbo:country* $countryOfBirth)
    ($soccerplayer dbo:team $team)
    ($team dbo:capacity $stadiumcapacity)
    ($team dbo:ground $countryOfTeam)
    ($countryOfBirth a dbo:Country)
    ($countryOfBirth dbo:populationTotal $population)
    ($countryOfTeam a dbo:Country)
    (filter (!= $countryOfTeam  $countryOfBirth))
    (filter (> $stadiumcapacity 30000)) (filter (> $population 10000000))))  (order_by  $soccerplayer)))

    Display names and dates of birth of all actors born in London after year 1930, who are still alive:

    (select ((fields ($name $birth) )(where (($person dbo:birthPlace \"<http://dbpedia.org/resource/London>\") ($person dbo:occupation \"<http://dbpedia.org/resource/Actor>\")
    ($person foaf:name $name)
    ($person dbo:birthDate $birth)
    (filter (> $birth  \"'1930-01-01'^^xsd:date\"))
    (filter_not_exists ($person dbo:deathDate $death)) )) ))


    Select all writers born in Moscow in 19 century:
    (select ( (fields ($writer $writerLabel)) (where (($writer a dbo:Writer)
    ($writer dbo:birthPlace \"<http://dbpedia.org/resource/Moscow>\") ($writer dbo:birthDate $birthdate)
    ($writer rdfs:label $writerLabel)
    (filter (and (>  (year $birthdate) 1800)  (<=  (year $birthdate) 1899))) (filter (= (lang $writerLabel) 'en' )))) (order_by $writer)))

    Display names and dates of birth and death of all people born in New York between 1900-1950; sort the results based on the birth date
    (select ((fields ($person $birth $death)) (where (($person dbo:birthPlace \"<http://dbpedia.org/resource/New_York_City>\")
    ($person dbo:birthDate $birth) ($person dbo:deathDate $death)
    (filter (and (>= $birth \"'1900-01-01'^^xsd:date\") (<= $birth \"'1950-12-31'^^xsd:date\"))))) (order_by $birth)))


    Find manufacturers who produce more than 10 different products and display the number of different products they produce
    !(select ((fields ($manufacturer (as (count $product) $count))) (where (($product rdf:type <http://dbpedia.org/ontology/Device>)
    ($product dbo:manufacturer $manufacturer))) (group_by $manufacturer) (having (> (count $product) 10)) limit 3))

    Count number of musicians with the first name Pharrell
    (select ((fields ((count $musician))) (where (($musician rdf:type dbo:MusicalArtist) ($musician foaf:name $name)
    (filter (contains (str $name) \"'Pharrell'\" ) )))))

    Please check that variables in 'fields'  statement are also present in 'where' statement.

    Important:
    Check the correctness of brackets in query, number of closing brackets should be equal to the number of opening brackets.
    All values  starting with \"<http://dbpedia.org/\" should be in quotes.
    The fields statement should not contain properties (like dbo:MusicalArtist or foaf:name). Return only query.
    ")
    (messages)))
